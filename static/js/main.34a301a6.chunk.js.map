{"version":3,"sources":["redditSecrets.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RedditSecrets","clientId","clientSecret","username","password","userAgent","useStyles","makeStyles","root","display","flexDirection","backgroundColor","minHeight","fontSize","color","alignItems","header","textAlign","todos","list","sentiment","redditSentiment","reddit","snoowrap","App","classes","useState","topPostData","setTopPostData","useEffect","a","subreddit","getSubreddit","getTop","time","limit","topPosts","map","post","id","link","url","text","title","score","loadReddit","className","entry","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAQeA,EARO,CACpBC,SAAU,iBACVC,aAAc,iCACdC,SAAU,SACVC,SAAU,mBACVC,UAAW,kC,OCAPC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,QAAS,OACTC,cAAe,SACfC,gBAAiB,UACjBC,UAAW,QACXC,SAAU,qBACVC,MAAO,QACPC,WAAY,UAGdC,OAAQ,CACNC,UAAW,UAGbC,MAAO,CACLT,QAAS,QAGXU,KAAM,GAGNC,UAAW,GAIXC,gBAAiB,KAKbC,EAAS,IAAIC,IAASvB,GAsEbwB,MA7Df,WACE,IAAMC,EAAUnB,IADH,EAEyBoB,mBAAiB,IAF1C,mBAENC,EAFM,KAEOC,EAFP,KA6Bb,OAzBAC,qBAAU,WAAM,4CACd,gCAAAC,EAAA,6DACQC,EAAYT,EAAOU,aAAa,qBADxC,SAEyBD,EAAUE,OAAO,CAAEC,KAAM,OAAQC,MAAO,KAFjE,OAEQC,EAFR,OAIQT,EAAcS,EAASC,KAAI,SAACC,GAChC,MAAO,CACLC,GAAID,EAAKC,GACTC,KAAMF,EAAKG,IACXC,KAAMJ,EAAKK,MACXC,MAAON,EAAKM,UAIhBhB,EAAeD,GAbjB,4CADc,uBAAC,WAAD,wBAsBdkB,KACC,IAGD,sBAAKC,UAAWrB,EAAQjB,KAAxB,UACE,yBAAQsC,UAAWrB,EAAQT,OAA3B,UACE,iIADF,aAGE,oIAGF,sBAAK8B,UAAWrB,EAAQP,MAAxB,iBAEE,qBAAI4B,UAAWrB,EAAQN,KAAvB,UACE,0EACA,gFACA,+FACA,8GAIJ,sBAAK2B,UAAWrB,EAAQL,UAAxB,UACE,wBAAQ0B,UAAWrB,EAAQJ,gBAA3B,+FAGA,6BAEIM,EAAYU,KAAI,SAAAU,GAAK,OAAK,mCAAMA,EAAML,oBCpFnCM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.34a301a6.chunk.js","sourcesContent":["const RedditSecrets = {\r\n  clientId: 'q2X3R7r4Ea6bXg',\r\n  clientSecret: 'bWgBtxjW_eRAAVKjyl4p5k20ErF4sQ',\r\n  username: 'MeoMix',\r\n  password: 'intmain(REDDIT0)',\r\n  userAgent: 'http://MeoMix.github.io/stonks',\r\n}\r\n\r\nexport default RedditSecrets;\r\n  ","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport snoowrap from 'snoowrap';\nimport RedditSecrets from './redditSecrets';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: '#282c34',\n    minHeight: '100vh',\n    fontSize: 'calc(10px + 2vmin)',\n    color: 'white',\n    alignItems: 'center',\n  },\n\n  header: {\n    textAlign: 'center',\n  },\n\n  todos: {\n    display: 'flex',\n  },\n\n  list: {\n  },\n\n  sentiment: {\n\n  },\n\n  redditSentiment: {\n\n  }\n});\n\nconst reddit = new snoowrap(RedditSecrets);\n\ntype Post = {\n  id: string,\n  link: string,\n  text: string,\n  score: number,\n}\n\nfunction App() {\n  const classes = useStyles();\n  const [topPostData, setTopPostData] = useState<Post[]>([]);\n\n  useEffect(() => {\n    async function loadReddit() {\n      const subreddit = reddit.getSubreddit(\"SatoshiStreetBets\");\n      const topPosts = await subreddit.getTop({ time: 'hour', limit: 20 });\n\n      const topPostData = topPosts.map((post) => {\n        return {\n          id: post.id,\n          link: post.url,\n          text: post.title,\n          score: post.score\n        };\n      });\n\n      setTopPostData(topPostData);\n    \n      // const thread = await topPosts[0].expandReplies({ limit: 10, depth: 10 });\n    \n      // console.log(\"comment count\", thread.comments.length);\n      // thread.comments.forEach((comment) => console.log(comment.body));\n    }\n\n    loadReddit();\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <header className={classes.header}>\n        <p>ðŸš€ðŸš€ðŸ’ŽðŸ¤²ðŸ’ŽðŸ¤²ðŸš€ðŸš€</p>\n            When Moon?\n        <p>ðŸš€ðŸš€ðŸ’ŽðŸ¤²ðŸ’ŽðŸ¤²ðŸš€ðŸš€</p>\n      </header>\n\n      <div className={classes.todos}>\n        TODO\n        <ul className={classes.list}>\n          <li>Add support for monitoring SSB sentiment</li>\n          <li>Add basic calendar for tracking upcoming plays</li>\n          <li>Add ability to evaluate efficacy of past-due calendar entries</li>\n          <li>Stretch - add support for tracking active positions, gains, and losses</li>\n        </ul>\n      </div>\n\n      <div className={classes.sentiment}>\n        <header className={classes.redditSentiment}>\n          r/SatoshiStreetBets Sentiment (okay, well, actually, just some top posts for now)\n        </header>\n        <ul>\n          {\n            topPostData.map(entry => (<li> {entry.text}</li>))\n          }\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}